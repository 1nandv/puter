/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,

 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */

/* Implementation: Manipulates the x and y inputs
 * and operates on the resulting values, as follows:
 * if (zx == 1) set x = 0        // 16-bit constant
 * if (nx == 1) set x = !x       // bitwise not
 * if (zy == 1) set y = 0        // 16-bit constant
 * if (ny == 1) set y = !y       // bitwise not
 
 * if (f == 1)  set out = x + y  // integer 2's complement addition
 * if (f == 0)  set out = x & y  // bitwise and
 * if (no == 1) set out = !out   // bitwise not
 */

CHIP ALU {
    IN  
        x[16], y[16],  /* 16-bit inputs */
        zx, /* zero the x input? */
        nx, /* negate the x input? */
        zy, /* zero the y input? */
        ny, /* negate the y input? */
        f,  /* compute (out = x + y) or (out = x & y)? */
        no; /* negate the out output? */
    OUT 
        out[16], /* 16-bit output */
        zr,      /* if (out == 0) equals 1, else 0 */
        ng;      /* if (out < 0)  equals 1, else 0 */

    PARTS:
    /* set x pin */
    Mux16(a=x, b[0..15]=false, sel=zx, out=x1);
    Not16(in=x1, out=notx);
    Mux16(a=x1, b=notx, sel=nx, out=x2);

    /* set y pin */
    Mux16(a=y, b[0..15]=false, sel=zy, out=y1);
    Not16(in=y1, out=noty);
    Mux16(a=y1, b=noty, sel=ny, out=y2);

    /* set out and ng pin */
    Add16(a=x2, b=y2, out=sumXandY);
    And16(a=x2, b=y2, out=andXandY);
    Mux16(a=andXandY, b=sumXandY, sel=f, out=out1);
    Not16(in=out1, out=notout);
    Mux16(a=out1, b=notout, sel=no, out=out, out[15]=ng, out[0..7]=fp, out[8..15]=sp);

    /* set zr pin */
    Or8Way(in=fp, out=zr1);
    Or8Way(in=sp, out=zr2);
    Or(a=zr1, b=zr2, out=zr3);
    Not(in=zr3, out=zr);
}

